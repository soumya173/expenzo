---
swagger: "2.0"
info:
  description: "Expense manager backend REST API swagger definition."
  version: "1.0.0"
  title: "Swagger Petstore"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "petstore.swagger.io"
basePath: "/api"
tags:
- name: "user"
  description: "Operations about user"
schemes:
- "https"
- "http"
paths:
  /user/login:
    post:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "login_user"
      parameters:
      - in: "body"
        name: "auth"
        description: "Pet object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/UserLogin"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            properties:
              token:
                type: "string"
        "400":
          description: "Invalid username/password supplied"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "swagger_server.controllers.user_controller"
  /user/logout:
    post:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logout_user"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/SuccessResponse"
        "400":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "swagger_server.controllers.user_controller"
definitions:
  UserLogin:
    type: "object"
    properties:
      email:
        type: "string"
      password:
        type: "string"
  SuccessResponse:
    type: "object"
    properties:
      type:
        type: "string"
      message:
        type: "string"
      data:
        type: "object"
        properties: {}
    example:
      data: "{}"
      type: "type"
      message: "message"
  ErrorResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      message:
        type: "string"
      type:
        type: "string"
